# Generated by Selenium IDE
import pytest
import re
import os
from dotenv import load_dotenv
import json
from selenium import webdriver
from selenium.webdriver.common import by
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.remote import webelement
from selenium.webdriver.remote.webelement import WebElement
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support import expected_conditions as ec
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

from enum import Enum


class TarifOptionen(Enum):
    Normal = '105085073'
    ErmaeÃŸigt = '102373921'


class WebDriverExtensions():
    @staticmethod
    def WaitOnElement(wait: WebDriverWait, by, selector) -> WebElement:
        return wait.until(ec.visibility_of_element_located((by, selector)))

    @staticmethod
    def WaitOnElements(wait: WebDriverWait, by, selector) -> list[WebElement]:
        return wait.until(ec.visibility_of_all_elements_located((by, selector)))

    @staticmethod
    def WaitOnElement2(wait: WebDriverWait, by, selector):
        return wait.until(ec.visibility_of_element_located((by, selector)))


class TestDynochromBooking():
    def setup_method(self, method=None):
        print("Setup method")

        load_dotenv()
        print(os.getenv("DRIVERPATH"))
        self.driver = webdriver.Chrome(executable_path=os.getenv("DRIVERPATH"))
        self.wait = WebDriverWait(self.driver, 10)
        self.vars = {}

    def teardown_method(self, method):
        print("Teardown method")
        self.driver.quit()

    def test_dynochromBooking(self):
        # try:6
        print("Run booking...")
        # Open booking page
        self.driver.get(os.getenv('URL'))
        # resize window
        self.driver.set_window_size(1936, 1066)

        file = self.readFile('./baseData.json')

        self.setStartDate(file['startDate'])
        maxPeople = self.selectSlot(file)
        self.fillBaseData(file)
        self.addParticipants(maxPeople)

        # Forward to payment
        WebDriverExtensions.WaitOnElement(self.wait,
                                          By.CSS_SELECTOR, "button.drp-course-booking-continue.drp-mt-4").click()
        self.driver.execute_script("window.scrollTo(0,518)")

        # WebDriverExtensions.WaitOnElement(self.wait,By.ID, "drp-course-booking-submit").click()

        print("Booking has finished!")

        # except:
        #     print("Unexpected error:", os.system.exc_info()[0])
        #     raise

    def readFile(self, path, fileType='json'):
        #  Opening JSON file
        f = open(path, encoding='UTF-8')

        def readJsonFile(file):
            return json.load(file)

        options = {
            'json': readJsonFile(f)
        }

        return options[fileType]

    def fillBaseData(self, baseData):

        # Enter Firstname
        WebDriverExtensions.WaitOnElement(self.wait,
                                          By.CSS_SELECTOR, ".drp-row:nth-child(2) > .drp-col-12 > input").send_keys(baseData['firstname'])
        # Enter last name
        WebDriverExtensions.WaitOnElement(self.wait,
                                          By.CSS_SELECTOR, ".drp-row:nth-child(3) input").send_keys(baseData['lastname'])
        # Enter street
        WebDriverExtensions.WaitOnElement(self.wait,
                                          By.CSS_SELECTOR, ".drp-row:nth-child(5) input").send_keys(baseData['street'])
        # Enter plz
        WebDriverExtensions.WaitOnElement(self.wait,
                                          By.CSS_SELECTOR, ".drp-row:nth-child(6) input").send_keys(baseData['plz'])
        # Enter city
        WebDriverExtensions.WaitOnElement(self.wait,
                                          By.CSS_SELECTOR, ".drp-row:nth-child(7) input").send_keys(baseData['city'])
        # Enter mobile number
        WebDriverExtensions.WaitOnElement(self.wait,
                                          By.CSS_SELECTOR, ".drp-row:nth-child(8) input").send_keys(baseData['mobile'])
        # enter email adress
        WebDriverExtensions.WaitOnElement(self.wait,
                                          By.ID, "drp-course-booking-person-email").send_keys(baseData['email'])
        # Select tarif
        dropdown: WebElement = WebDriverExtensions.WaitOnElement(self.wait,
                                                                 By.CSS_SELECTOR, ".drp-course-booking-tariff-select > .drp-w-100")
        dropdown.find_element(
            By.XPATH, "//option[@value='"+TarifOptionen[baseData['tariff']].value+"']").click()
        # Accept AGB
        WebDriverExtensions.WaitOnElement(
            self.wait, By.ID, "drp-course-booking-client-terms-cb").click()
        # Accept data processing
        WebDriverExtensions.WaitOnElement(self.wait,
                                          By.ID, "drp-course-booking-data-processing-cb").click()
        # self.driver.execute_script(
        #     "document.querySelector(\".drp-row:nth-child(4) input\").valueAsDate=new Date(1994,11,31)")
        WebDriverExtensions.WaitOnElement(self.wait,
                                          By.CSS_SELECTOR, ".drp-row:nth-child(4) input").send_keys(baseData['birthdate'])

    def setStartDate(self, startDate):
        days: list[WebElement] = WebDriverExtensions.WaitOnElements(
            self.wait, By.CSS_SELECTOR, 'div.drp-calendar-weeks div.drp-calendar-day.drp-calendar-day-dates')

        p: list[WebElement] = [date for date in days if str(
            date.text).replace(' ', '') == startDate]
        p[0].click()

    def selectSlot(self, baseData):
        slots: list[WebElement] = WebDriverExtensions.WaitOnElements(
            self.wait, By.CSS_SELECTOR, 'div.drp-course-dates-list div.drp-course-date-item.drp-mb-3')

        slot = slots[baseData['slot']-1]
        if('drp-date-not-relevant' in slot.get_attribute('class')):
            pytest.exit("The slot {0} is not available!".format(slot.text))

        element = slot.find_element_by_css_selector(
            "span.drp-course-date-item-max-participants")

        matches = re.match(
            r'(\d+)', element.text)

        maxPeople = int(matches.groups()[0])

        button = slot.find_element_by_css_selector(
            "div.drp-course-date-item-booking-box.drp-p-2 > button")
        button.click()

        return maxPeople

    def addParticipants(self, maxPeople):
        file = self.readFile('./participants.json')
        # button class: "drp-mt-2 drp-course-booking-add-participant"
        if(len(file) == 0):
            return

        WebDriverExtensions.WaitOnElement(
            self.wait, By.CSS_SELECTOR, "button.drp-mt-2.drp-course-booking-add-participant").click()
        participantNumber = 1

        for participant in file:
            WebDriverExtensions.WaitOnElement(
                self.wait, By.CSS_SELECTOR, "input:is([autocomplete='section-participant{} given-name']".format(participantNumber)).send_keys(participant['firstname'])
            WebDriverExtensions.WaitOnElement(
                self.wait, By.CSS_SELECTOR, "input:is([autocomplete='section-participant{} family-name']".format(participantNumber)).send_keys(participant['lastname'])
            WebDriverExtensions.WaitOnElement(
                self.wait, By.CSS_SELECTOR, "input:is([autocomplete='section-participant{} bday']".format(participantNumber)).send_keys(participant['birthdate'])
            WebDriverExtensions.WaitOnElement(
                self.wait, By.CSS_SELECTOR, "input:is([autocomplete='section-participant{} email']".format(participantNumber)).send_keys(participant['email'])
            tarifElement = WebDriverExtensions.WaitOnElements(
                self.wait, By.CSS_SELECTOR, "div.drp-course-booking-participant-item.drp-row.drp-mb-3")[participantNumber]

            for t in TarifOptionen:
                if(t.name == participant['tariff']):
                    tarif = t
                    break

            tarifElement.find_element_by_css_selector(
                "select.drp-w-100.drp-mb-2 option:is([value='{}'])".format(tarif.value)).click()

            participantNumber += 1

            if(participantNumber is maxPeople):

                if(len(file[maxPeople:]) == 0):
                    print(
                        "The following participants were not added, because of the maximum per slot reached: ")

                    for p in file[maxPeople:]:
                        print(p['firstname'] + " " +
                              p['lastname'])
                return

            WebDriverExtensions.WaitOnElement(
                self.wait, By.CSS_SELECTOR, "button.drp-mt-2.drp-course-booking-add-participant").click()


test = TestDynochromBooking()
test.setup_method()
test.test_dynochromBooking()
